[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/250408-quarto-setup/index.html",
    "href": "posts/250408-quarto-setup/index.html",
    "title": "Quarto와 Github Pages로 블로그 빨리 만들기",
    "section": "",
    "text": "새로 블로그를 시작하기로 했습니다(이전 블로그에겐 미안하지만…) 블로그 작업에 있어서 고려한 점은 다음과 같습니다.\n\n코드(R/Python)이나 LLM 프롬프트를 올려 놓을 공간이 있었으면 좋겠다.\n안 올려놓으면 여기저기 돌아다니다가 사라지는데, 나중에 비슷한 작업을 할 때 다시 찾아야 한다.\n주로 업무에 활용하는 코드/프롬프트를 올려 놓으면 다른 사람들한테도 도움이 될 것 같다.\n\n해서 만들기 시작했지만, 이전(지난번엔 Jekyll에 plugin 붙이고 하는 작업을 열심히 했던 것 같습니다)처럼 작업을 위한 툴을 하나하나 배우거나 깔 시간은 없어서, 빠르게 만들 수 있는 툴을 찾아보니 Quarto로 작업을 하는 방식이 있더라고요. 어차피 제가 코드를 올릴 만한 것들은 주로 R 작업물일테니(Python은 굳이 제가…?), RStudio에서 Quarto를 돌려서 만드는 작업을 해봐야 겠다고 생각했습니다. 이런저런 오류를 거쳐서 실제 올리는 데까지는 10분 정도 걸렸네요. 만들어서 올리는 내용이 하나로 정리되어 있는 것 같지 않아서 여기까지 작업을 정리합니다."
  },
  {
    "objectID": "posts/250408-quarto-setup/index.html#블로그-제작의-변",
    "href": "posts/250408-quarto-setup/index.html#블로그-제작의-변",
    "title": "Quarto와 Github Pages로 블로그 빨리 만들기",
    "section": "",
    "text": "새로 블로그를 시작하기로 했습니다(이전 블로그에겐 미안하지만…) 블로그 작업에 있어서 고려한 점은 다음과 같습니다.\n\n코드(R/Python)이나 LLM 프롬프트를 올려 놓을 공간이 있었으면 좋겠다.\n안 올려놓으면 여기저기 돌아다니다가 사라지는데, 나중에 비슷한 작업을 할 때 다시 찾아야 한다.\n주로 업무에 활용하는 코드/프롬프트를 올려 놓으면 다른 사람들한테도 도움이 될 것 같다.\n\n해서 만들기 시작했지만, 이전(지난번엔 Jekyll에 plugin 붙이고 하는 작업을 열심히 했던 것 같습니다)처럼 작업을 위한 툴을 하나하나 배우거나 깔 시간은 없어서, 빠르게 만들 수 있는 툴을 찾아보니 Quarto로 작업을 하는 방식이 있더라고요. 어차피 제가 코드를 올릴 만한 것들은 주로 R 작업물일테니(Python은 굳이 제가…?), RStudio에서 Quarto를 돌려서 만드는 작업을 해봐야 겠다고 생각했습니다. 이런저런 오류를 거쳐서 실제 올리는 데까지는 10분 정도 걸렸네요. 만들어서 올리는 내용이 하나로 정리되어 있는 것 같지 않아서 여기까지 작업을 정리합니다."
  },
  {
    "objectID": "posts/250408-quarto-setup/index.html#github-pages-만들기",
    "href": "posts/250408-quarto-setup/index.html#github-pages-만들기",
    "title": "Quarto와 Github Pages로 블로그 빨리 만들기",
    "section": "Github Pages 만들기",
    "text": "Github Pages 만들기\n물론 Github Docs에 엄청 잘 정리되어 있지만, 순서만 다시 써봅니다.\n\nGithub 가입\n페이지 오른쪽 위 +를 눌러 New repository를 선택\nOwner에 원하는 계정 선택\nRepository name에 주소 넣기: [계정이름].github.io 로 만들면 가장 단순(다른 이름으로 넣으면 [계정이름].github.io/[설정이름]이 되므로 복잡함)\n\n\n\nVisibility는 Public\nREADME.md 파일 포함(체크박스)\n\n\n\nCreate repository\n\n[계정이름].github.io 레포지토리로 이동\n\n상단 메뉴 마지막 Settings 클린\n좌측 열 메뉴 “Code and automation” 중 “Pages” 선택\n\n\n\n[계정이름].github.io로 주소 만들었으면 자동으로 Github Pages가 연결되어 있음: Visit site 누르면 페이지 확인 가능\n\n\n\nQuarto 설정\nQuarto는 이전 Bookdown, distill 패키지에 이어 여러 플랫폼에서 마크다운 기반 출력물을 만들어 내는 서비스라고 해요. 최근 이쪽에 관심을 끄고 살았더니 쓰던 패키지들이 다 새로운 패키지로 갈아 엎어졌네요(제 패키지도 다시 작업을 해야 하나 봅니다). RStudio 상에서 쉽게 페이지 만드는 작업을 지원합니다.\n먼저 R과 RStudio를 설치한 다음, Quarto에 가서 quarto도 받아 설치합니다.\n\nRStudio - File - New Project 클릭\nNew Directory - Quarto Blog 선택\n디렉토리 정하고 아래 Create a git repository, Use renv with this project 선택(체크박스)\nCreate Project\n\n그러면 새로 프로젝트가 만들어지고 기본 파일이 다 설정됩니다. 블로그 만드는 기본 틀은 이미 완성이 된 건데요, 여기에서 바로 Github 업로드를 위해 파일을 수정합니다. _quarto.yml의 시작 부분을 다음과 같이 수정합니다.\nproject:\n    type: website\n    output-dir: docs\n다음은 publish - github push입니다.\n\nterminal을 열어서 project 디렉토리로 이동\nquarto render로 지금 내용을 html 출력\ngit init\ngit add docs\ngit commit -m \"First commit\"\ngit remote add origin [레포지토리 https 주소]\n\n\n\ngit branch -m master main (계속 master로 올라가서 변경)\ngit config pull.ff only (fast-forward로 설정해서 main 병합 해결)\ngit push -f origin main\n(git 인증 관련: classic token으로 작업하는 방식이 단순함)\n\n\n이전 인증 리셋: git config --global --unset credential.helper\nGithub - Settings - Developer settings\n\n\n\nPersonal access tokens - Tokens (classic)\n\n\n\n우상단 Generate new token - Generate new token (classic)\n\n\n\nNote에 적당한 이름 넣기 - Expiration 기간 설정 - repo 체크박스 설정\n\n\n\n만들어진 token이 비밀번호: git push 실행했을 때 Username (계정 이름) 넣고 Password에 생성한 token 넣으면 됨\n\n여기까지 하면 repository에 docs 디렉토리가 올라갑니다. 다음,\n\n상단 메뉴 마지막 Settings 클린\n좌측 열 메뉴 “Code and automation” 중 “Pages” 선택\nBranch에서 main - /docs로 드롭다운 메뉴 변경 후 Save\n\n\n이러면 [계정이름].github.io에 publish한 Quarto blog를 올릴 준비가 끝났습니다!\n\n\n\nThat Easy"
  },
  {
    "objectID": "posts/250409-using-sf/index.html",
    "href": "posts/250409-using-sf/index.html",
    "title": "R: sf package를 통한 지도 시각화",
    "section": "",
    "text": "이전에 지도를 그릴 때는 rgdal 패키지를 사용했었죠. 저도 이전에는 당연히 rgdal - readOGR로 .shp 파일을 불러와서 시각화하는 방식으로 작업했는데, 한동안 지도 관련 시각화할 일이 없다보니 rgdal 패키지가 심지어 CRAN repository에서 빠졌다는 것도 몰랐습니다(오랫동안 보수되지 않으면 패키지가 자동으로 빠집니다).\n찾아보니 몇몇 패키지가 R에 GDAL을 연결해 작업할 수 있도록 지원하고 있더라고요. 오늘은 새 패키지인 sf를 소개하고, 이를 통해 간단히 한국 지도 + 레이블을 올리는 작업을 설명합니다.\n복잡하게 소개할 시간도, 능력도 되지 않기 때문에 이번엔 아주 간단히만 설명하고, 나중에 더 보강하는 방식으로 접근하려 해요."
  },
  {
    "objectID": "posts/250409-using-sf/index.html#r에서-지도-그리기",
    "href": "posts/250409-using-sf/index.html#r에서-지도-그리기",
    "title": "R: sf package를 통한 지도 시각화",
    "section": "",
    "text": "이전에 지도를 그릴 때는 rgdal 패키지를 사용했었죠. 저도 이전에는 당연히 rgdal - readOGR로 .shp 파일을 불러와서 시각화하는 방식으로 작업했는데, 한동안 지도 관련 시각화할 일이 없다보니 rgdal 패키지가 심지어 CRAN repository에서 빠졌다는 것도 몰랐습니다(오랫동안 보수되지 않으면 패키지가 자동으로 빠집니다).\n찾아보니 몇몇 패키지가 R에 GDAL을 연결해 작업할 수 있도록 지원하고 있더라고요. 오늘은 새 패키지인 sf를 소개하고, 이를 통해 간단히 한국 지도 + 레이블을 올리는 작업을 설명합니다.\n복잡하게 소개할 시간도, 능력도 되지 않기 때문에 이번엔 아주 간단히만 설명하고, 나중에 더 보강하는 방식으로 접근하려 해요."
  },
  {
    "objectID": "posts/250409-using-sf/index.html#sf-package",
    "href": "posts/250409-using-sf/index.html#sf-package",
    "title": "R: sf package를 통한 지도 시각화",
    "section": "sf package",
    "text": "sf package\nsf는 simple features의 약자로군요. Simple Features of R 홈페이지에서 관련 내용을 확인하실 수 있어요. GEOS, GDAL, PROJ의 R 인터페이스를 제공합니다.\n이전 rgdal을 쓰면 그림 그리는 것 다음 작업이 꽤 귀찮았는데(레이블 별로 로케이션 잡고 정리해서 텍스트 위치 부여를 추가하는 작업이 필요했지요) 아주 간편해졌어요! 아래 실례로 바로 보시죠."
  },
  {
    "objectID": "posts/250409-using-sf/index.html#sf-package로-한국-지도-그리기-레이블-추가",
    "href": "posts/250409-using-sf/index.html#sf-package로-한국-지도-그리기-레이블-추가",
    "title": "R: sf package를 통한 지도 시각화",
    "section": "sf package로 한국 지도 그리기 + 레이블 추가",
    "text": "sf package로 한국 지도 그리기 + 레이블 추가\n먼저 관련 패키지를 불러옵니다. readxl이 붙어있는 것은 제가 통계청에서 다운로드받은 자료를 붙여서 썼기 때문입니다. showtext는 R에 추가 폰트 불러오는 작업을 간단하게 지원하는 패키지지요!\n\nlibrary(sf)\n\nLinking to GEOS 3.13.0, GDAL 3.5.3, PROJ 9.5.1; sf_use_s2() is TRUE\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(readxl)\nlibrary(showtext)\n\nLoading required package: sysfonts\nLoading required package: showtextdb\n\n\nshowtext_auto로 폰트를 불러옵니다.\n\nshowtext_auto()\n\n자료는 두 가지를 받았어요.\n\n대한민국 최신 행정구역(SHP) 다운로드\n\n행정구역 공간 데이터를 제공하는 홈페이지입니다. 최근 자료는 새로 등록/로그인이 필요해서, 그냥 2023년 7월 자료를 받는 것으로 갈음했습니다(제 목적에서 엄청 자세한 자료가 필요하지 않아서요).\n\n시군구별 의료인력현황\n\n제가 만들려고 했던 자료가 시도별 의사/치과의사 수 지도였어요. 대학 강의자료 만드는 중이었지요. 통계청 자료를 엑셀 파일로 받아서 간단히 가공했습니다(원자료가 세 차원으로 column name을 써놔서 다 날리고 단순화했어요).\n자료를 로드합니다. 그냥 st_read로 shp 파일을 불러오면 바로 붙습니다.\n\nmap &lt;- st_read('.shp file location')\nclinicians &lt;- read_excel('excel file from 통계청')\n\n\n\nReading layer `ctprvn' from data source \n  `/Users/jk/Downloads/ctprvn_20230729/ctprvn.shp' using driver `ESRI Shapefile'\nSimple feature collection with 17 features and 3 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 746110.3 ymin: 1458754 xmax: 1387950 ymax: 2068444\nCRS:           NA\n\n\nNew names:\n• `` -&gt; `...1`\n\n\n다 좋은데 자료형에서 CTP_KOR_NM 열(이전에 작업해 보신 분들은 익숙하신, 한글 지역명이 들어 있는 열입니다)이 인코딩이 깨집니다. iconv로 수정했습니다.\n\nmap$CTP_KOR_NM &lt;- iconv(map$CTP_KOR_NM, from = 'EUC-KR', to = 'UTF-8')\n\n두 데이터 프레임을 지역명 기준으로 병합했어요. 지역 순서가 같아서(강원도만 빼고: 엑셀에서 그냥 옮겨 붙이기로 작업했습니다) 그냥 shp 데이터의 지역명 열을 그대로 옮겨 붙인 다음, left_join으로 간단히 붙입니다.\n\nclinicians$...1 &lt;- c(\"전체\", map$CTP_KOR_NM)\nmap_value &lt;- left_join(map, clinicians %&gt;% select(...1, 의사_소계, 치과의사_소계, 한의사_소계) %&gt;% rename(CTP_KOR_NM = ...1))\n\nJoining with `by = join_by(CTP_KOR_NM)`\n\n\n바로 그림! 엄청 쉬워졌지요 ㅠㅠ 이전에는 여기에서 spacial 값을 받아서 텍스트 위치를 다시 잡아줬어야 했는데, sf는 ggplot에서 sf_label과 sf_text를 지원합니다! sf_label에 레이블로 쓸 값 넣어 주시면 바로 중간 위치에 붙어요. modern package라더니, 정말 모던합니다.\n\nmap_value %&gt;% \n  ggplot() +\n  geom_sf() +\n  # geom_sf_label(aes(label = CTP_KOR_NM)) +\n  geom_sf_label(aes(label = 의사_소계, vjust=-1)) +\n  geom_sf_label(aes(label = 치과의사_소계)) +\n  # geom_sf_text(aes(label = 한의사_소계, vjust=-1)) +\n  theme_minimal(base_family = \"Pretendard\")\n\n\n\n\nNumbers of Doctors and Dentists by Jurisdictions\n\n\n\n\n지도 + 레이블 그림이 5분만에 완성되었습니다!"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "junhewk-kim.github.io",
    "section": "",
    "text": "R: sf package를 통한 지도 시각화\n\n\n\n\n\n\nR\n\n\ncode\n\n\nlecture\n\n\n\n\n\n\n\n\n\nApr 9, 2025\n\n\n김준혁\n\n\n\n\n\n\n\n\n\n\n\n\nQuarto와 Github Pages로 블로그 빨리 만들기\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\nApr 8, 2025\n\n\n김준혁\n\n\n\n\n\n\nNo matching items"
  }
]